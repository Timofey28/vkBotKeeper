from data import token, my_id, db_dbname, db_host, db_user, db_password, my_token, group_id, main_album_id
from keyboards import no2dow, no2_v_dow, no2dow_short, no2dow_gen
from keyboards import k_main_menu, k_in_subject__createFor, k_show_materials, k_add_materials, k_confirmation_delete_subject, \
    k_add_to_specific_day__create, k_back, k_back_to_main_menu, k_delete_materials, k_recover_materials, k_confirmation_delete_all_materials, \
    k_choose_materials_to_delete, k_choose_materials_to_recover, k_edit_materials, k_edit_specific_material, k_add_to_specific_day_to_specific_place
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
import vk_api.keyboard as kb
import requests
from time import sleep
from datetime import datetime, date, timedelta
import psycopg2
import random
import schedule
from multiprocessing import Process
import threading


session = vk_api.VkApi(token=token)
vk = session.get_api()
longpoll = VkLongPoll(session)
session_me = vk_api.VkApi(token=my_token)
vk_me = session_me.get_api()
connection = psycopg2.connect(dbname=db_dbname,
                              host=db_host,
                              user=db_user,
                              password=db_password)
curr = connection.cursor()

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


def process(buddy_id, msg, any_photos, sticker_id=None):
    query = f"SELECT status, sex, id, subject_user_is_in_rn, current_subject_name FROM users WHERE vk_id = {buddy_id}"
    curr.execute(query)
    result = curr.fetchall()
    if not result:
        vk.messages.send(user_id=buddy_id, message="–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞", random_id=0, keyboard=k_main_menu)
        person = vk.users.get(user_ids=f'{buddy_id}', fields='sex,screen_name')[0]
        query = f'''INSERT INTO users (name, surname, sex, profile_link, vk_id, status) VALUES('{person["first_name"]}', '{person["last_name"]}', '{"male" if person["sex"] == 2 else "female"}', 'vk.com/{person["screen_name"]}', {person["id"]}, 'main_menu');'''
        curr.execute(query)
        connection.commit()
        return

    status = result[0][0]
    sex = result[0][1]
    db_id = result[0][2]
    subject_user_is_in_rn = result[0][3]
    current_subject_name = result[0][4]
    dayIsEmpty = False
    if status == 'add_to_specific_day':
        query = f"SELECT date_of_lecture FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
        curr.execute(query)
        adding_date = curr.fetchall()[0][0]
        query = f"SELECT TRUE FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{adding_date}' AND deletion_time IS NULL LIMIT 1;"
        curr.execute(query)
        if curr.fetchall():
            dayIsEmpty = False
        else:
            dayIsEmpty = True

    answeredSticker = False
    if sticker_id:
        if sticker_id in [20081, 8617, 20406, 60526, 12995, 8796]:  # —Å–ø–∞—Å–∏–±–æ-—Å—Ç–∏–∫–µ—Ä—ã
            answer_stickers = [20082, 20663, 71081]
            rand = random.randrange(len(answer_stickers))
            kbrd = ''
            if status == 'main_menu': kbrd = k_main_menu
            elif status == 'choose_subject': kbrd = k_back_to_main_menu
            elif status == 'in_subject': kbrd = k_in_subject__createFor(current_subject_name)
            elif status == 'show_materials': kbrd = k_show_materials
            elif status == 'add_materials': kbrd = k_add_materials
            elif status == 'add_subject' or status == 'delete_subject' or \
                status == 'choose_adding_day_from_list' or status == 'choose_showing_day_from_list' or \
                status == 'choose_deleting_day_from_list' or status == 'choose_recovering_day_from_list' or \
                status == 'choose_editing_day_from_list' or status == 'choose_material_to_edit': kbrd = k_back
            elif status == 'confirmation_delete_subject': kbrd = k_confirmation_delete_subject
            elif status == 'add_to_specific_day': kbrd = k_add_to_specific_day__create(dayIsEmpty=dayIsEmpty)
            elif status == 'add_to_specific_day_to_specific_place': kbrd = k_add_to_specific_day_to_specific_place
            elif status == 'delete_materials': kbrd = k_delete_materials
            elif status == 'recover_materials': kbrd = k_recover_materials
            elif status == 'confirmation_delete_all_materials': kbrd = k_confirmation_delete_all_materials
            elif status == 'choose_materials_to_delete': kbrd = k_choose_materials_to_delete
            elif status == 'choose_materials_to_recover': kbrd = k_choose_materials_to_recover
            elif status == 'edit_materials': kbrd = k_edit_materials
            elif status == 'edit_specific_material': kbrd = k_edit_specific_material
            vk.messages.send(user_id=buddy_id, sticker_id=answer_stickers[rand], random_id=0, keyboard=kbrd)
            answeredSticker = True
        else:
            vk.messages.send(user_id=buddy_id, sticker_id=sticker_id, random_id=0)
        # print(sticker_id)
    if buddy_id == my_id and msg.lower() == "exit":
        curr.close()
        connection.close()
        exit(0)

    photos = []
    if any_photos:
        getPhotosFromLastMessage(buddy_id, photos)

    if status == 'main_menu':
        if msg == "–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç":
            query = f"SELECT name FROM subjects WHERE user_id = {buddy_id};"
            curr.execute(query)
            subjects = [el[0] for el in curr.fetchall()]
            if subjects:
                keyboards = makeInlineKeyboardsFromList(subjects)
                for kbrd, nos in keyboards.items():
                    vk.messages.send(user_id=buddy_id, message=f"{nos[0]} - {nos[1]}" if nos[0] != nos[1] else f"{nos[0]}", random_id=0, keyboard=kbrd)
                vk.messages.send(user_id=buddy_id, message="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –º–µ—Ç–æ–¥–æ–º —Ç—ã–∫–∞ –ø–∞–ª—å—Ü–∞ –Ω–∞ –Ω–µ–≥–æ", random_id=0, keyboard=k_back_to_main_menu)
                updateUserStatus(buddy_id, 'choose_subject')
            else:
                vk.messages.send(user_id=buddy_id, message="–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –Ω–∞–¥–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö)", random_id=0, keyboard=k_main_menu)
        elif msg == "–î–æ–±–∞–≤–∏—Ç—å":
            vk.messages.send(user_id=buddy_id, message="–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞", random_id=0, keyboard=k_back)
            updateUserStatus(buddy_id, 'add_subject')
        elif msg == "–£–¥–∞–ª–∏—Ç—å":
            query = f"SELECT name FROM subjects WHERE user_id = {buddy_id};"
            curr.execute(query)
            subjects = [el[0] for el in curr.fetchall()]
            if subjects:
                keyboards = makeInlineKeyboardsFromList(subjects)
                for kbrd, nos in keyboards.items():
                    vk.messages.send(user_id=buddy_id, message=f"{nos[0]} - {nos[1]}" if nos[0] != nos[1] else f"{nos[0]}", random_id=0, keyboard=kbrd)
                vk.messages.send(user_id=buddy_id, message="–¢–∫–Ω–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å", random_id=0, keyboard=k_back)
                updateUserStatus(buddy_id, 'delete_subject')
            else:
                vk.messages.send(user_id=buddy_id, message="–£–¥–∞–ª—è—Ç—å –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ, –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å üôÑ", random_id=0, keyboard=k_main_menu)
        elif msg == "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤":
            query = f"SELECT name FROM subjects WHERE user_id = {buddy_id};"
            curr.execute(query)
            subjects = [el[0] for el in curr.fetchall()]
            if subjects:
                answer = "–¢–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:\n"
                for i in range(len(subjects)):
                    answer += f"\n{i + 1}) {subjects[i]}"
                vk.messages.send(user_id=buddy_id, message=answer, random_id=0, keyboard=k_main_menu)
            else:
                vk.messages.send(user_id=buddy_id, message="–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞", random_id=0, keyboard=k_main_menu)
        elif not answeredSticker:
            vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_main_menu)

    elif status == 'choose_subject':
        if msg == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            updateUserStatus(buddy_id, 'main_menu')
            vk.messages.send(user_id=buddy_id, message="–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º üòâ", random_id=0, keyboard=k_main_menu)
        else:
            query = f"SELECT id FROM subjects WHERE name = '{msg}' AND user_id = {buddy_id};"
            curr.execute(query)
            result = curr.fetchall()
            if result:
                query = f"UPDATE users SET status = 'in_subject', subject_user_is_in_rn = {result[0][0]}, current_subject_name = '{msg}' WHERE vk_id = {buddy_id};"
                curr.execute(query)
                connection.commit()
                vk.messages.send(user_id=buddy_id, message=f"–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–∞ \"{msg}\"! –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–∫–∏ –∏ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å üòÅ", random_id=0, keyboard=k_in_subject__createFor(msg))
            elif not answeredSticker:
                vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0)
                vk.messages.send(user_id=buddy_id, message="\"...—Ç–µ—Ä–ø–µ–ª–∏–≤–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∂–¥–∞—Ç—å –ø–æ–∫–∞ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å –ø—Ä–µ–¥–º–µ—Ç...\"", random_id=0, keyboard=k_back)

    elif status == 'in_subject':
        if msg == "–î–æ–±–∞–≤–∏—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å":
            updateUserStatus(buddy_id, 'add_materials')
            vk.messages.send(user_id=buddy_id, message="–í –∫–∞–∫–æ–π –¥–µ–Ω—å –¥–æ–±–∞–≤–∏—Ç—å?", random_id=0, keyboard=k_add_materials)
        elif msg == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
            query = f"SELECT COUNT(*) FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND deletion_time IS NULL;"
            curr.execute(query)
            rows_amount = curr.fetchall()[0][0]
            if rows_amount:
                updateUserStatus(buddy_id, 'show_materials')
                vk.messages.send(user_id=buddy_id, message="–ö–∞–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–∫–∞–∑–∞—Ç—å?", random_id=0, keyboard=k_show_materials)
            else:
                vk.messages.send(user_id=buddy_id, message=f"–¢—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª{'–∞' if sex == 'female' else ''} –≤ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å —è —Å—á–∏—Ç–∞—é)", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif msg == "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å":
            query = f"SELECT COUNT(*) FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND deletion_time IS NOT NULL;"
            curr.execute(query)
            rows_amount = curr.fetchall()[0][0]
            if rows_amount:
                updateUserStatus(buddy_id, 'recover_materials')
                vk.messages.send(user_id=buddy_id, message="–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?", random_id=0, keyboard=k_recover_materials)
            else:
                vk.messages.send(user_id=buddy_id, message=f"–¢—ã –ª–∏–±–æ –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–ª{'–∞' if sex == 'female' else ''} –≤ —ç—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ, –ª–∏–±–æ —É–∂–µ –≤—Å–µ —á—Ç–æ –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª{'–∞' if sex == 'female' else ''})", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif msg == "–£–¥–∞–ª–∏—Ç—å":
            query = f"SELECT COUNT(*) FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND deletion_time IS NULL;"
            curr.execute(query)
            rows_amount = curr.fetchall()[0][0]
            if rows_amount:
                updateUserStatus(buddy_id, 'delete_materials')
                vk.messages.send(user_id=buddy_id, message="–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?", random_id=0, keyboard=k_delete_materials)
            else:
                vk.messages.send(user_id=buddy_id, message=f"–¢—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª{'–∞' if sex == 'female' else ''} –≤ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif msg == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
            query = f"SELECT TRUE FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND deletion_time IS NULL;"
            curr.execute(query)
            if curr.fetchall():
                updateUserStatus(buddy_id, 'edit_materials')
                vk.messages.send(user_id=buddy_id, message="–ö–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", random_id=0, keyboard=k_edit_materials)
            else:
                vk.messages.send(user_id=buddy_id, message=f"–¢—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª{'–∞' if sex == 'female' else ''} –≤ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif msg == "–î—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç":
            query = f"SELECT name FROM subjects WHERE user_id = {buddy_id};"
            curr.execute(query)
            subjects = [el[0] for el in curr.fetchall()]
            if len(subjects) == 1:
                vk.messages.send(user_id=buddy_id, message="–£ —Ç–µ–±—è –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç - —ç—Ç–æ—Ç)", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
            else:
                keyboards = makeInlineKeyboardsFromList(subjects)
                for kbrd, nos in keyboards.items():
                    vk.messages.send(user_id=buddy_id, message=f"{nos[0]} - {nos[1]}" if nos[0] != nos[1] else f"{nos[0]}", random_id=0, keyboard=kbrd)
                vk.messages.send(user_id=buddy_id, message="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –º–µ—Ç–æ–¥–æ–º —Ç—ã–∫–∞ –ø–∞–ª—å—Ü–∞ –Ω–∞ –Ω–µ–≥–æ", random_id=0, keyboard=k_back_to_main_menu)
                updateUserStatus(buddy_id, 'choose_subject')
        elif msg == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            updateUserStatus(buddy_id, 'main_menu')
            vk.messages.send(user_id=buddy_id, message="–ö–∞–∫ —Å–∫–∞–∂–µ—à—å", random_id=0, keyboard=k_main_menu)
        elif msg == "" and photos == []:
            if not answeredSticker:
                vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif msg == f'"{current_subject_name}"':
            vk.messages.send(user_id=buddy_id, message="–î–∞ –¥–∞, –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ç—ã –ø—Ä–µ–¥–º–µ—Ç–µ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è, –∞ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å?)", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        else:
            assert(msg != "" or photos != [])
            photos = list(map(lambda x: addPhotoToAlbum(x), photos))
            query = f"INSERT INTO materials (user_id, subject_id, photo_link, caption, date_of_lecture, adding_time) " \
                    f"VALUES({db_id}, {subject_user_is_in_rn}, '{photos[0] if len(photos) > 0 else ''}', '{msg}', NOW()::DATE, NOW()::TIMESTAMP) RETURNING id;"
            curr.execute(query)
            last_material_id = curr.fetchall()[0][0]
            query = f"SELECT id, showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = NOW()::DATE;"
            curr.execute(query)
            result = curr.fetchall()
            record_id = 0
            if result:
                record_id = result[0][0]
                order_array = result[0][1]
                order_array.append(last_material_id)
            else:
                order_array = [last_material_id]
            for i in range(1, len(photos)):
                query = f"INSERT INTO materials (user_id, subject_id, photo_link, caption, date_of_lecture, adding_time) " \
                        f"VALUES({db_id}, {subject_user_is_in_rn}, '{photos[i]}', '', NOW()::DATE, NOW()::TIMESTAMP + INTERVAL '{i} MILLISECOND') RETURNING id;"
                curr.execute(query)
                last_material_id = curr.fetchall()[0][0]
                order_array.append(last_material_id)
            order_array = f"'{{{', '.join(list(map(str, order_array)))}}}'"
            if result:
                query = f"UPDATE showing_orders SET showing_order = {order_array} WHERE id = {record_id};"
                curr.execute(query)
            else:
                query = f"INSERT INTO showing_orders (user_id, subject_id, date_of_lecture, showing_order) VALUES({db_id}, {subject_user_is_in_rn}, NOW()::DATE, {order_array});"
                curr.execute(query)
            connection.commit()
            if msg != "":
                answer = "–°–æ—Ö—Ä–∞–Ω–∏–ª –∑–∞–ø–∏—Å—å"
                if len(photos) > 0:
                    answer += f" –∏ {pickUpRightWordEnding(len(photos), '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', writeNumber1=False)}"
            else:
                answer = f"–°–æ—Ö—Ä–∞–Ω–∏–ª {pickUpRightWordEnding(len(photos), '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', writeNumber1=False)}"
            answer += " ‚úÖ"
            vk.messages.send(user_id=buddy_id, message=answer, random_id=0, keyboard=k_in_subject__createFor(current_subject_name))

    elif status == 'show_materials':
        if msg == "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤":
            vk.messages.send(user_id=buddy_id, message="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–æ—Å–∏—Ç —á–∏—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ –Ω–∞–∂–∏–º–∞–π –±–æ–ª—å—à–µ —Å—é–¥–∞ ‚ò∫", random_id=0, keyboard=k_show_materials)
        elif msg == "–ó–∞ —Å–µ–≥–æ–¥–Ω—è":
            query = f"SELECT showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = NOW()::DATE;"
            curr.execute(query)
            result = curr.fetchall()
            if result:
                order_array = result[0][0]
                join_part = "JOIN (VALUES"
                for i in range(len(order_array)):
                    if i == 0: join_part += f" ({order_array[i]}, {i + 1})"
                    else: join_part += f", ({order_array[i]}, {i + 1})"
                join_part += ") AS x(id, ordering) ON materials.id = x.id "
                join_part += f"WHERE materials.user_id = {db_id} AND materials.subject_id = {subject_user_is_in_rn} AND materials.date_of_lecture = NOW()::DATE AND materials.deletion_time IS NULL "
                join_part += "ORDER BY x.ordering"
                query = f"SELECT caption, photo_link FROM materials {join_part};"
                curr.execute(query)
                result = combineMaterialsIntoGroups(curr.fetchall())
                updateUserStatus(buddy_id, 'in_subject')
                for i in range(len(result)):
                    if i == len(result) - 1:
                        vk.messages.send(user_id=buddy_id, message=result[i][0], attachment=result[i][1], random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
                    else:
                        vk.messages.send(user_id=buddy_id, message=result[i][0], attachment=result[i][1], random_id=0)
            else:
                vk.messages.send(user_id=buddy_id, message=f"–°–µ–≥–æ–¥–Ω—è —Ç—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª{'–∞' if sex == 'female' else ''}", random_id=0, keyboard=k_show_materials)
        elif msg == "–ó–∞ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑":
            query = f"SELECT DISTINCT date_of_lecture FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND deletion_time IS NULL ORDER BY date_of_lecture DESC LIMIT 2;"
            curr.execute(query)
            result = curr.fetchall()
            if result and (result[0][0] != date.today() or len(result) == 2):
                if result[0][0] == date.today():
                    result.pop(0)
                updateUserStatus(buddy_id, 'in_subject')
                previous_date = result[0][0]
                query = f"SELECT showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{previous_date}';"
                curr.execute(query)
                order_array = curr.fetchall()[0][0]
                join_part = "JOIN (VALUES"
                for i in range(len(order_array)):
                    if i == 0: join_part += f" ({order_array[i]}, {i + 1})"
                    else: join_part += f", ({order_array[i]}, {i + 1})"
                join_part += ") AS x(id, ordering) ON materials.id = x.id "
                join_part += f"WHERE materials.user_id = {db_id} AND materials.subject_id = {subject_user_is_in_rn} AND materials.date_of_lecture = '{previous_date}' AND materials.deletion_time IS NULL "
                join_part += "ORDER BY x.ordering"
                query = f"SELECT caption, photo_link FROM materials {join_part};"
                curr.execute(query)
                result = combineMaterialsIntoGroups(curr.fetchall())
                how_many_days = pickUpRightWordEnding((date.today() - previous_date).days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
                vk.messages.send(user_id=buddy_id, message=f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑, {how_many_days} –Ω–∞–∑–∞–¥ ({no2_v_dow[previous_date.weekday()]} {previous_date.strftime('%d.%m.%y')})", random_id=0)
                for i in range(len(result)):
                    if i == len(result) - 1:
                        vk.messages.send(user_id=buddy_id, message=result[i][0], attachment=result[i][1], random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
                    else:
                        vk.messages.send(user_id=buddy_id, message=result[i][0], attachment=result[i][1], random_id=0)
            else:
                vk.messages.send(user_id=buddy_id, message=f"–î–æ —Å–µ–≥–æ–¥–Ω—è—à–µ–≥–æ –¥–Ω—è —Ç—ã —Å—é–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª{'–∞' if sex == 'female' else ''}", random_id=0, keyboard=k_show_materials)
        elif msg == "–°—Ä–∞–∑—É –≤—Å–µ" or msg == "–°—Ä–∞–∑—É –≤—Å—ë":
            updateUserStatus(buddy_id, 'in_subject')
            query = f"SELECT DISTINCT date_of_lecture FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND deletion_time IS NULL ORDER BY date_of_lecture;"
            curr.execute(query)
            unique_dates = [el[0] for el in curr.fetchall()]
            assert(unique_dates != [])
            for unique_date in unique_dates:
                if unique_date != unique_dates[0]:
                    for _ in range(2):
                        vk.messages.send(user_id=buddy_id, message='‚è¨', random_id=0)
                how_many_days = pickUpRightWordEnding((date.today() - unique_date).days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
                if how_many_days == "0 –¥–Ω–µ–π":
                    message = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è üëá"
                elif how_many_days == "1 –¥–µ–Ω—å":
                    message = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤—á–µ—Ä–∞ üëá"
                else:
                    message = f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ {how_many_days} –Ω–∞–∑–∞–¥ ({no2_v_dow[unique_date.weekday()]} {unique_date.strftime('%d.%m.%y')}) üëá"
                vk.messages.send(user_id=buddy_id, message=message, random_id=0)
                query = f"SELECT showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{unique_date}';"
                curr.execute(query)
                order_array = curr.fetchall()[0][0]
                join_part = "JOIN (VALUES"
                for i in range(len(order_array)):
                    if i == 0: join_part += f" ({order_array[i]}, {i + 1})"
                    else: join_part += f", ({order_array[i]}, {i + 1})"
                join_part += ") AS x(id, ordering) ON materials.id = x.id "
                join_part += f"WHERE materials.user_id = {db_id} AND materials.subject_id = {subject_user_is_in_rn} AND materials.date_of_lecture = '{unique_date}' AND materials.deletion_time IS NULL "
                join_part += "ORDER BY x.ordering"
                query = f"SELECT caption, photo_link FROM materials {join_part};"
                curr.execute(query)
                result = combineMaterialsIntoGroups(curr.fetchall())
                for i in range(len(result)):
                    if i == len(result) - 1 and unique_date == unique_dates[-1]:
                        vk.messages.send(user_id=buddy_id, message=result[i][0], attachment=result[i][1], random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
                    else:
                        vk.messages.send(user_id=buddy_id, message=result[i][0], attachment=result[i][1], random_id=0)
        elif msg == "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞":
            makeListOfDates_intoInlineKb(buddy_id, db_id, subject_user_is_in_rn, 'IS NULL', 'choose_showing_day_from_list', "–ó–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã?")
        elif msg == "–ù–∞–∑–∞–¥":
            updateUserStatus(buddy_id, 'in_subject')
            vk.messages.send(user_id=buddy_id, message="–õ–∞–¥—ã ü§ù", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif not answeredSticker:
            vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_show_materials)

    elif status == 'add_materials':
        if msg == "–ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥" or msg == "–î–≤–µ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥":
            adding_date = date.today() - timedelta(days=(7 if msg == "–ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥" else 14))
            query = f"INSERT INTO intermediate_information (user_id, subject_name, date_of_lecture) VALUES({db_id}, '{current_subject_name}', '{adding_date}');"
            curr.execute(query)
            updateUserStatus(buddy_id, 'add_to_specific_day')
            message = "–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å—é–¥–∞ —Å–≤–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∏ –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –ø–æ–¥ —ç—Ç–æ–π –¥–∞—Ç–æ–π)"
            query = f"SELECT TRUE FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{adding_date}' AND deletion_time IS NULL LIMIT 1;"
            curr.execute(query)
            if curr.fetchall():
                dayIsEmpty = False
                message += f" –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∫–∞–∫–æ–µ-—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ, –∞ –Ω–µ –≤ –∫–æ–Ω–µ—Ü –¥–Ω—è, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–î–æ–±–∞–≤–∏—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ\" ‚¨á"
                query = f"SELECT showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{adding_date}';"
                curr.execute(query)
                result = curr.fetchall()
                order_array = result[0][0]
                join_part = "JOIN (VALUES"
                for i in range(len(order_array)):
                    if i == 0: join_part += f" ({order_array[i]}, {i + 1})"
                    else: join_part += f", ({order_array[i]}, {i + 1})"
                join_part += ") AS x(id, ordering) ON materials.id = x.id "
                join_part += f"WHERE materials.user_id = {db_id} AND materials.subject_id = {subject_user_is_in_rn} AND materials.date_of_lecture = '{adding_date}' AND materials.deletion_time IS NULL "
                join_part += "ORDER BY x.ordering"
                query = f"SELECT caption, photo_link FROM materials {join_part};"
                curr.execute(query)
                result = combineMaterialsIntoGroups(curr.fetchall())
                vk.messages.send(user_id=buddy_id, message=f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ {'–Ω–µ–¥–µ–ª—é ' if msg == '–ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥' else '–¥–≤–µ –Ω–µ–¥–µ–ª–∏ '}–Ω–∞–∑–∞–¥ ({no2_v_dow[adding_date.weekday()]} {adding_date.strftime('%d.%m.%y')}) üëá", random_id=0)
                for i in range(len(result)):
                    vk.messages.send(user_id=buddy_id, message=result[i][0], attachment=result[i][1], random_id=0)
            else:
                dayIsEmpty = True
                message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {no2_v_dow[adding_date.weekday()]} {adding_date.strftime('%d.%m.%y')} ({'–Ω–µ–¥–µ–ª—é ' if msg == '–ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥' else '–¥–≤–µ –Ω–µ–¥–µ–ª–∏ '}–Ω–∞–∑–∞–¥)! " + message
            vk.messages.send(user_id=buddy_id, message=message, random_id=0, keyboard=k_add_to_specific_day__create(dayIsEmpty))
        elif msg == "–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É/–≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞":
            query = f"SELECT TRUE FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND deletion_time IS NULL;"
            curr.execute(query)
            if curr.fetchall():
                final_phrase = f"–í –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç—ã —Ö–æ—Ç–µ–ª{'–∞' if sex == 'female' else ''} –±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª? –í –¥–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–Ω–∏, –∫–æ–≥–¥–∞ —Ç—ã "\
                               f"–¥–æ–±–∞–≤–ª—è–ª{'–∞' if sex == 'female' else ''} –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç, –æ–¥–Ω–∞–∫–æ "\
                               f"–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ –∏–∑ –Ω–∏—Ö. –¢—ã –º–æ–∂–µ—à—å —Å–∞–º{'–∞' if sex == 'female' else ''} –≤–≤–µ—Å—Ç–∏ –ª—é–±—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–¥–¥.–º–º.–≥–≥–≥–≥\" "\
                               f"–∏–ª–∏ \"–¥–¥.–º–º.–≥–≥\" –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç—É–¥–∞ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ üòâüëç"
                makeListOfDates_intoInlineKb(buddy_id, db_id, subject_user_is_in_rn, 'IS NULL', 'choose_adding_day_from_list', final_phrase)
            else:
                updateUserStatus(buddy_id, 'choose_adding_day_from_list')
                final_phrase = f"–í –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç—ã —Ö–æ—Ç–µ–ª{'–∞' if sex == 'female' else ''} –±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª? –í–≤–µ–¥–∏ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–¥–¥.–º–º.–≥–≥–≥–≥\" –∏–ª–∏ \"–¥–¥.–º–º.–≥–≥\""
                vk.messages.send(user_id=buddy_id, message=final_phrase, random_id=0, keyboard=k_back)
        elif msg == "–ú–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–∞":
            updateUserStatus(buddy_id, 'in_subject')
            vk.messages.send(user_id=buddy_id, message="–î–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif not answeredSticker:
            vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_add_materials)

    elif status == 'add_subject':
        if msg == "–ù–∞–∑–∞–¥":
            updateUserStatus(buddy_id, 'main_menu')
            vk.messages.send(user_id=buddy_id, message="–í–æ–∑–≤—Ä–∞—â–∞—é üòâ", random_id=0, keyboard=k_main_menu)
        else:
            if msg == "":
                vk.messages.send(user_id=buddy_id, message="–•–æ—Ç–µ–ª–æ—Å—å –±—ã —Ç–µ–∫—Å—Ç —É–≤–∏–¥–µ—Ç—å –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å...", random_id=0, keyboard=k_back)
            elif "&quot;" in msg or "'" in msg:
                vk.messages.send(user_id=buddy_id, message="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–≤—ã—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑", random_id=0, keyboard=k_back)
            else:
                query = f"SELECT TRUE FROM subjects WHERE name = '{msg}';"
                curr.execute(query)
                if curr.fetchall():
                    vk.messages.send(user_id=buddy_id, message="–¢–∞–∫–æ–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ù–∞–∑–æ–≤–∏ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –∫–∞–∫-–Ω–∏–±—É–¥—å –ø–æ-–¥—Ä—É–≥–æ–º—É)", random_id=0, keyboard=k_back)
                else:
                    query = f"INSERT INTO subjects (name, user_id) VALUES('{msg}', {buddy_id});"
                    curr.execute(query)
                    connection.commit()
                    updateUserStatus(buddy_id, 'main_menu')
                    vk.messages.send(user_id=buddy_id, message=f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç: \"{msg}\" üëç", random_id=0, keyboard=k_main_menu)

    elif status == 'delete_subject':
        if msg == "–ù–∞–∑–∞–¥":
            updateUserStatus(buddy_id, 'main_menu')
            vk.messages.send(user_id=buddy_id, message=f"–î–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üëå", random_id=0, keyboard=k_main_menu)
        else:
            if msg == "":
                vk.messages.send(user_id=buddy_id, message="–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç, –∞ –µ—â–µ –ª—É—á—à–µ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨Ü", random_id=0, keyboard=k_back)
            else:
                query = f"SELECT EXISTS (SELECT TRUE FROM subjects WHERE name = '{msg}' and user_id = {buddy_id});"
                curr.execute(query)
                if curr.fetchall()[0][0]:
                    query = f"INSERT INTO intermediate_information (subject_name, user_id) VALUES('{msg}', {buddy_id});"
                    curr.execute(query)
                    updateUserStatus(buddy_id, 'confirmation_delete_subject')
                    vk.messages.send(user_id=buddy_id, message=f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é, –í–°–ï –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–µ–¥–º–µ—Ç–∞ \"{msg}\" –±—É–¥—É—Ç –ù–ê–í–°–ï–ì–î–ê —É–¥–∞–ª–µ–Ω—ã. –£–≤–µ—Ä–µ–Ω{'–∞' if sex == 'female' else ''} –≤ —Å–≤–æ–µ–º –≤—ã–±–æ—Ä–µ?", random_id=0, keyboard=k_confirmation_delete_subject)
                else:
                    vk.messages.send(user_id=buddy_id, message="–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É", random_id=0, keyboard=k_back)

    elif status == 'confirmation_delete_subject':
        if msg == "–î–∞":
            query = f"SELECT subject_name FROM intermediate_information WHERE user_id = {buddy_id};"
            curr.execute(query)
            subject = curr.fetchall()
            assert(len(subject) == 1)
            subject_name = subject[0][0]
            query = f"DELETE FROM intermediate_information WHERE user_id = {buddy_id};"
            curr.execute(query)

            query = f"SELECT id FROM subjects WHERE user_id = {buddy_id} AND name = '{subject_name}';"
            curr.execute(query)
            subject_id_toDelete = curr.fetchall()[0][0]
            query = f"DELETE FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_id_toDelete};"
            curr.execute(query)

            query = f"DELETE FROM materials WHERE " \
                    f"user_id IN (SELECT id FROM users WHERE vk_id = {buddy_id}) AND " \
                    f"subject_id IN (SELECT id FROM subjects WHERE name = '{subject_name}')" \
                    f"RETURNING materials.photo_link;"
            curr.execute(query)
            photo_links = [el[0] for el in curr.fetchall()]
            for photo_link in photo_links:
                if photo_link:
                    vk_me.photos.delete(owner_id=-group_id, photo_id=int(photo_link[photo_link.rfind('_') + 1:]))
            query = f"DELETE FROM subjects WHERE name = '{subject_name}' AND user_id = {buddy_id}"
            curr.execute(query)

            updateUserStatus(buddy_id, 'main_menu')
            vk.messages.send(user_id=buddy_id, message="–£–¥–∞–ª–∏–ª ‚úÖ", random_id=0, keyboard=k_main_menu)
        elif msg == "–ù–ò–ù–ê–î–ê":
            query = f"DELETE FROM intermediate_information WHERE user_id = {buddy_id}"
            curr.execute(query)
            updateUserStatus(buddy_id, 'main_menu')
            vk.messages.send(user_id=buddy_id, message="–ù—É –ª–∞–¥–Ω–æ", random_id=0, keyboard=k_main_menu)
        elif not answeredSticker:
            vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_confirmation_delete_subject)

    elif status == 'choose_adding_day_from_list':
        if msg == "–ù–∞–∑–∞–¥":
            updateUserStatus(buddy_id, 'add_materials')
            vk.messages.send(user_id=buddy_id, message="–í–µ—Ä–Ω—É–ª üòâ", random_id=0, keyboard=k_add_materials)
        else:
            try:
                if msg.find(' ') == -1 and msg.count('.') == 2:
                    year = int(msg[msg.rfind('.') + 1:])
                    if year < 100:
                        year += 2000
                    adding_date = date(year, int(msg[msg.find('.') + 1:msg.rfind('.')]), int(msg[:msg.find('.')]))
                else:
                    if msg == "–°–µ–≥–æ–¥–Ω—è":
                        adding_date = date.today()
                    elif msg == "–í—á–µ—Ä–∞":
                        adding_date = date.today() - timedelta(days=1)
                    else:
                        dateString = msg[msg.find(' ') + 1:msg.find(' ') + 9]
                        adding_date = date(2000 + int(dateString[6:]), int(dateString[3:5]), int(dateString[:2]))
            except ValueError:
                vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_back)
                vk.messages.send(user_id=buddy_id, message="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–≤–æ—é –¥–∞—Ç—É. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–¥–¥.–º–º.–≥–≥–≥–≥\" –∏–ª–∏ \"–¥–¥.–º–º.–≥–≥\". –ù–∞–ø—Ä–∏–º–µ—Ä, \"28.07.23\"", random_id=0, keyboard=k_back)
                return
            except Exception as e:
                log_message = f"choose_adding_day_from_list\nError: {str(e)}\n{datetime.now().strftime('%d.%m.%Y, %H:%M:%S')}\n\n"
                with open("ErrorLog.txt", "a", encoding="utf-8") as file:
                    file.write(log_message)
                curr.close()
                connection.close()
                exit(-1)
            message = "–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å—é–¥–∞ —Å–≤–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∏ –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –ø–æ–¥ —ç—Ç–æ–π –¥–∞—Ç–æ–π)"
            how_many_days = pickUpRightWordEnding((date.today() - adding_date).days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
            query = f"SELECT TRUE FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{adding_date}' AND deletion_time IS NULL LIMIT 1;"
            curr.execute(query)
            if curr.fetchall():
                dayIsEmpty = False
                query = f"SELECT showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{adding_date}';"
                curr.execute(query)
                result = curr.fetchall()
                order_array = result[0][0]
                join_part = "JOIN (VALUES"
                for i in range(len(order_array)):
                    if i == 0: join_part += f" ({order_array[i]}, {i + 1})"
                    else: join_part += f", ({order_array[i]}, {i + 1})"
                join_part += ") AS x(id, ordering) ON materials.id = x.id "
                join_part += f"WHERE materials.user_id = {db_id} AND materials.subject_id = {subject_user_is_in_rn} AND materials.date_of_lecture = '{adding_date}' AND materials.deletion_time IS NULL "
                join_part += "ORDER BY x.ordering"
                query = f"SELECT caption, photo_link FROM materials {join_part};"
                curr.execute(query)
                result = combineMaterialsIntoGroups(curr.fetchall())
                if how_many_days == "0 –¥–Ω–µ–π":
                    message_before_sending_materials = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è üëá"
                elif how_many_days == "1 –¥–µ–Ω—å":
                    message_before_sending_materials = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤—á–µ—Ä–∞ üëá"
                else:
                    message_before_sending_materials = f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ {how_many_days} –Ω–∞–∑–∞–¥ ({no2_v_dow[adding_date.weekday()]} {adding_date.strftime('%d.%m.%y')}) üëá"
                vk.messages.send(user_id=buddy_id, message=message_before_sending_materials, random_id=0)
                for i in range(len(result)):
                    vk.messages.send(user_id=buddy_id, message=result[i][0], attachment=result[i][1], random_id=0)
            else:
                dayIsEmpty = True
                greeting = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {no2_v_dow[adding_date.weekday()]} {adding_date.strftime('%d.%m.%y')}"
                if (date.today() - adding_date).days > 0:
                    greeting += f" ({how_many_days} –Ω–∞–∑–∞–¥)! "
                else:
                    greeting += "! "
                message = greeting + message
            query = f"INSERT INTO intermediate_information (user_id, subject_name, date_of_lecture) VALUES({db_id}, '{current_subject_name}', '{adding_date}');"
            curr.execute(query)
            updateUserStatus(buddy_id, 'add_to_specific_day')
            if not dayIsEmpty:
                message += f" –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∫–∞–∫–æ–µ-—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ, –∞ –Ω–µ –≤ –∫–æ–Ω–µ—Ü –¥–Ω—è, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–î–æ–±–∞–≤–∏—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ\" ‚¨á"
            vk.messages.send(user_id=buddy_id, message=message, random_id=0, keyboard=k_add_to_specific_day__create(dayIsEmpty))

    elif status == 'add_to_specific_day':
        if msg == "–î–æ–±–∞–≤–∏—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ" and not dayIsEmpty:
            updateUserStatus(buddy_id, 'add_to_specific_day_to_specific_place')
            query = f"SELECT date_of_lecture FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            adding_date = curr.fetchall()[0][0]
            query = f"SELECT showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{adding_date}';"
            curr.execute(query)
            order_array = curr.fetchall()[0][0]
            join_part = "JOIN (VALUES"
            for i in range(len(order_array)):
                if i == 0: join_part += f" ({order_array[i]}, {i + 1})"
                else: join_part += f", ({order_array[i]}, {i + 1})"
            join_part += ") AS x(id, ordering) ON materials.id = x.id "
            join_part += f"WHERE materials.user_id = {db_id} AND materials.subject_id = {subject_user_is_in_rn} AND materials.date_of_lecture = '{adding_date}' AND materials.deletion_time IS NULL "
            join_part += "ORDER BY x.ordering"
            query = f"SELECT caption, photo_link FROM materials {join_part};"
            curr.execute(query)
            result = curr.fetchall()
            how_many_days = pickUpRightWordEnding((date.today() - adding_date).days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
            if how_many_days == "0 –¥–Ω–µ–π":
                message_before_sending_materials = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è üëá"
            elif how_many_days == "1 –¥–µ–Ω—å":
                message_before_sending_materials = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤—á–µ—Ä–∞ üëá"
            else:
                message_before_sending_materials = f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ {how_many_days} –Ω–∞–∑–∞–¥ ({no2_v_dow[adding_date.weekday()]} {adding_date.strftime('%d.%m.%y')}) üëá"
            vk.messages.send(user_id=buddy_id, message=message_before_sending_materials, random_id=0)
            for i in range(len(result)):
                vk.messages.send(user_id=buddy_id, message=f"[{i + 1}]\n{result[i][0]}", attachment=result[i][1], random_id=0)
            vk.messages.send(user_id=buddy_id, message=f"–ö–∞–∫ –≤–∏–¥–∏—à—å, –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ, –Ω–∞–ø–∏—à–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞—á–∏–Ω–∞—è —Å –µ–¥–∏–Ω–∏—Ü—ã), –∞ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç —Ç–≤–æ–µ–π –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∂–µ—à—å –Ω–æ–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏, —è –¥–æ–±–∞–≤–ª—é —Ç–≤–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ üòâ", random_id=0, keyboard=k_add_to_specific_day_to_specific_place)
        elif msg == "–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å":
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            updateUserStatus(buddy_id, 'add_materials')
            vk.messages.send(user_id=buddy_id, message="–î–∞ –ª–µ–≥–∫–æ üòé", random_id=0, keyboard=k_add_materials)
        elif msg == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            updateUserStatus(buddy_id, 'main_menu')
            vk.messages.send(user_id=buddy_id, message="–î–∞ –ª–µ–≥–∫–æ üòé", random_id=0, keyboard=k_main_menu)
        elif msg == "–ú–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–∞":
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            updateUserStatus(buddy_id, 'in_subject')
            vk.messages.send(user_id=buddy_id, message="–í–µ—Ä–Ω—É–ª üòâ", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif msg == "" and photos == []:
            if not answeredSticker:
                vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_add_to_specific_day__create(dayIsEmpty))
        else:
            photos = list(map(lambda x: addPhotoToAlbum(x), photos))
            query = f"SELECT date_of_lecture FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            adding_date = curr.fetchall()[0][0]
            query = f"SELECT id, showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{adding_date}'"
            curr.execute(query)
            result = curr.fetchall()
            record_id = 0
            if result:
                record_id = result[0][0]
                order_array = result[0][1]
            else:
                order_array = []
            query = f"INSERT INTO materials (user_id, subject_id, photo_link, caption, date_of_lecture, adding_time) " \
                    f"VALUES({db_id}, {subject_user_is_in_rn}, '{photos[0] if len(photos) > 0 else ''}', '{msg}', '{adding_date}', NOW()::TIMESTAMP) RETURNING id;"
            curr.execute(query)
            last_material_id = curr.fetchall()[0][0]
            order_array.append(last_material_id)
            for i in range(1, len(photos)):
                query = f"INSERT INTO materials (user_id, subject_id, photo_link, caption, date_of_lecture, adding_time) " \
                        f"VALUES({db_id}, {subject_user_is_in_rn}, '{photos[i]}', '', '{adding_date}', NOW()::TIMESTAMP + INTERVAL '{i} MILLISECOND') RETURNING id;"
                curr.execute(query)
                last_material_id = curr.fetchall()[0][0]
                order_array.append(last_material_id)
            order_array = f"'{{{', '.join(list(map(str, order_array)))}}}'"
            if result:
                query = f"UPDATE showing_orders SET showing_order = {order_array} WHERE id = {record_id};"
                curr.execute(query)
                clarification = ' –≤ –∫–æ–Ω–µ—Ü –¥–Ω—è'
            else:
                query = f"INSERT INTO showing_orders (user_id, subject_id, date_of_lecture, showing_order) VALUES({db_id}, {subject_user_is_in_rn}, '{adding_date}', {order_array});"
                curr.execute(query)
                clarification = ''
            connection.commit()
            if msg != "":
                answer = f"–°–æ—Ö—Ä–∞–Ω–∏–ª{clarification} –∑–∞–ø–∏—Å—å"
                if len(photos) > 0:
                    answer += f" –∏ {pickUpRightWordEnding(len(photos), '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', writeNumber1=False)}"
            else:
                answer = f"–°–æ—Ö—Ä–∞–Ω–∏–ª{clarification} {pickUpRightWordEnding(len(photos), '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', writeNumber1=False)}"
            answer += " ‚úÖ"
            vk.messages.send(user_id=buddy_id, message=answer, random_id=0, keyboard=k_add_to_specific_day__create(False))

    elif status == 'add_to_specific_day_to_specific_place':
        if msg == "–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å":
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            updateUserStatus(buddy_id, 'add_materials')
            vk.messages.send(user_id=buddy_id, message="–î–∞ –ª–µ–≥–∫–æ üòé", random_id=0, keyboard=k_add_materials)
        elif msg == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            updateUserStatus(buddy_id, 'main_menu')
            vk.messages.send(user_id=buddy_id, message="–î–∞ –ª–µ–≥–∫–æ üòé", random_id=0, keyboard=k_main_menu)
        elif msg == "–ú–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–∞":
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            updateUserStatus(buddy_id, 'in_subject')
            vk.messages.send(user_id=buddy_id, message="–í–µ—Ä–Ω—É–ª üòâ", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif msg == "–ù–∞–∑–∞–¥":
            updateUserStatus(buddy_id, 'add_to_specific_day')
            query = f"SELECT date_of_lecture FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            adding_date = curr.fetchall()[0][0]
            how_many_days = pickUpRightWordEnding((date.today() - adding_date).days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
            vk.messages.send(user_id=buddy_id, message=f"–ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –∫–æ–Ω–µ—Ü –¥–Ω—è {no2_v_dow[adding_date.weekday()]}, {adding_date.strftime('%d.%m.%y')} ({how_many_days} –Ω–∞–∑–∞–¥) üòâ", random_id=0, keyboard=k_add_to_specific_day__create(False))
        elif msg == "" and photos == []:
            if not answeredSticker:
                vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_add_to_specific_day_to_specific_place)
        else:
            photos = list(map(lambda x: addPhotoToAlbum(x), photos))
            query = f"SELECT date_of_lecture FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            adding_date = curr.fetchall()[0][0]
            query = f"SELECT id, showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{adding_date}'"
            curr.execute(query)
            result = curr.fetchall()
            assert(result != [])
            record_id = result[0][0]
            order_array = result[0][1]
            query = f"SELECT id FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{adding_date}' AND deletion_time IS NOT NULL;"
            curr.execute(query)
            deleted_materials = {el[0] for el in curr.fetchall()}
            place = -1
            if msg.find('\n') != -1:
                try:
                    place = int(msg[:msg.find('\n')])
                    place = max(1, place)
                    msg = msg[msg.find('\n') + 1:]
                    assert (msg != '')
                except:
                    pass
            else:
                try:
                    place = int(msg)
                    msg = ''
                except:
                    pass
            if place == -1:  # —é–∑–µ—Ä –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞ => –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ –Ω–∞—á–∞–ª–µ –µ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ (–¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –Ω–∏–º–∏)
                place = 1
            else:
                rightful_place = 0
                while rightful_place < len(order_array) and order_array[rightful_place] in deleted_materials:
                    rightful_place += 1
                place = min(place, len(order_array))
                while place > 0:
                    place -= 1
                    rightful_place += 1
                    while rightful_place <= len(order_array) and order_array[rightful_place - 1] in deleted_materials:
                        rightful_place += 1
                place = rightful_place
            query = f"INSERT INTO materials (user_id, subject_id, photo_link, caption, date_of_lecture, adding_time) " \
                    f"VALUES({db_id}, {subject_user_is_in_rn}, '{photos[0] if len(photos) > 0 else ''}', '{msg}', '{adding_date}', NOW()::TIMESTAMP) RETURNING id;"
            curr.execute(query)
            last_material_id = curr.fetchall()[0][0]
            order_array.insert(place - 1, last_material_id)
            place += 1
            for i in range(1, len(photos)):
                query = f"INSERT INTO materials (user_id, subject_id, photo_link, caption, date_of_lecture, adding_time) " \
                        f"VALUES({db_id}, {subject_user_is_in_rn}, '{photos[i]}', '', '{adding_date}', NOW()::TIMESTAMP + INTERVAL '{i} MILLISECOND') RETURNING id;"
                curr.execute(query)
                last_material_id = curr.fetchall()[0][0]
                while place < len(order_array) and order_array[place - 1] in deleted_materials:
                    place += 1
                order_array.insert(place - 1, last_material_id)
                place += 1
            query = f"UPDATE showing_orders SET showing_order = '{{{', '.join(list(map(str, order_array)))}}}' WHERE id = {record_id};"
            curr.execute(query)
            connection.commit()
            if msg != "":
                answer = "–î–æ–±–∞–≤–∏–ª –∑–∞–ø–∏—Å—å"
                if len(photos) > 0:
                    answer += f" –∏ {pickUpRightWordEnding(len(photos), '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', writeNumber1=False)}"
            else:
                answer = f"–î–æ–±–∞–≤–∏–ª {pickUpRightWordEnding(len(photos), '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', writeNumber1=False)}"
            answer += " ‚úÖ"
            vk.messages.send(user_id=buddy_id, message=answer, random_id=0)
            how_many_days = pickUpRightWordEnding((date.today() - adding_date).days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
            vk.messages.send(user_id=buddy_id, message=f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã {no2dow_gen[adding_date.weekday()]} {adding_date.strftime('%d.%m.%Y')} ({how_many_days} –Ω–∞–∑–∞–¥) –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç:", random_id=0)
            join_part = "JOIN (VALUES"
            for i in range(len(order_array)):
                if i == 0: join_part += f" ({order_array[i]}, {i + 1})"
                else: join_part += f", ({order_array[i]}, {i + 1})"
            join_part += ") AS x(id, ordering) ON materials.id = x.id "
            join_part += f"WHERE materials.user_id = {db_id} AND materials.subject_id = {subject_user_is_in_rn} AND materials.date_of_lecture = '{adding_date}' AND materials.deletion_time IS NULL "
            join_part += "ORDER BY x.ordering"
            query = f"SELECT caption, photo_link FROM materials {join_part};"
            curr.execute(query)
            result = curr.fetchall()
            for i in range(len(result)):
                vk.messages.send(user_id=buddy_id, message=f"[{i + 1}]\n{result[i][0]}", attachment=result[i][1], random_id=0)
            vk.messages.send(user_id=buddy_id, message=f"–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∂–µ–ª–∞–µ–º–æ–µ –º–µ—Å—Ç–æ (–Ω–∞—á–∏–Ω–∞—è —Å –µ–¥–∏–Ω–∏—Ü—ã). –ò–Ω–∞—á–µ —è –¥–æ–±–∞–≤–ª—é —Ç–≤–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ!", random_id=0, keyboard=k_add_to_specific_day_to_specific_place)

    elif status == 'choose_showing_day_from_list':
        if msg == "–ù–∞–∑–∞–¥":
            updateUserStatus(buddy_id, 'show_materials')
            vk.messages.send(user_id=buddy_id, message="–í–µ—Ä–Ω—É–ª üòâ", random_id=0, keyboard=k_show_materials)
        else:
            try:
                if msg == "–°–µ–≥–æ–¥–Ω—è":
                    materials_date = date.today()
                elif msg == "–í—á–µ—Ä–∞":
                    materials_date = date.today() - timedelta(days=1)
                else:
                    dateString = msg[msg.find(' ') + 1:msg.find(' ') + 9]
                    materials_date = date(2000 + int(dateString[6:]), int(dateString[3:5]), int(dateString[:2]))
                how_many_days = pickUpRightWordEnding((date.today() - materials_date).days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
                if how_many_days == "0 –¥–Ω–µ–π":
                    message = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è üëá"
                elif how_many_days == "1 –¥–µ–Ω—å":
                    message = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤—á–µ—Ä–∞ üëá"
                else:
                    message = f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ {how_many_days} –Ω–∞–∑–∞–¥ ({no2_v_dow[materials_date.weekday()]} {materials_date.strftime('%d.%m.%y')}) üëá"
                vk.messages.send(user_id=buddy_id, message=message, random_id=0)
                query = f"SELECT showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{materials_date}';"
                curr.execute(query)
                order_array = curr.fetchall()[0][0]
                join_part = "JOIN (VALUES"
                for i in range(len(order_array)):
                    if i == 0: join_part += f" ({order_array[i]}, {i + 1})"
                    else: join_part += f", ({order_array[i]}, {i + 1})"
                join_part += ") AS x(id, ordering) ON materials.id = x.id "
                join_part += f"WHERE materials.user_id = {db_id} AND materials.subject_id = {subject_user_is_in_rn} AND materials.date_of_lecture = '{materials_date}' AND materials.deletion_time IS NULL "
                join_part += "ORDER BY x.ordering"
                query = f"SELECT caption, photo_link FROM materials {join_part};"
                curr.execute(query)
                result = combineMaterialsIntoGroups(curr.fetchall())
                for i in range(len(result)):
                    if i == len(result) - 1:
                        vk.messages.send(user_id=buddy_id, message=result[i][0], attachment=result[i][1], random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
                    else:
                        vk.messages.send(user_id=buddy_id, message=result[i][0], attachment=result[i][1], random_id=0)
                updateUserStatus(buddy_id, 'in_subject')
            except ValueError:
                vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_back)
            except Exception as e:
                log_message = f"choose_showing_day_from_list\nError: {str(e)}\n{datetime.now().strftime('%d.%m.%Y, %H:%M:%S')}\n\n"
                with open("ErrorLog.txt", "a", encoding="utf-8") as file:
                    file.write(log_message)
                curr.close()
                connection.close()
                exit(-1)

    elif status == 'delete_materials':
        if msg == "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
            updateUserStatus(buddy_id, 'in_subject')
            query = f"SELECT caption, photo_link, date_of_lecture, id FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND deletion_time IS NULL ORDER BY adding_time DESC LIMIT 1;"
            curr.execute(query)
            result = curr.fetchall()
            assert(result != [])
            caption = result[0][0]
            photo_link = result[0][1]
            date_of_lecture = result[0][2]
            id_toDelete = result[0][3]
            query = f"UPDATE materials SET deletion_time = NOW()::TIMESTAMP WHERE id = {id_toDelete};"
            curr.execute(query)
            connection.commit()
            if caption and photo_link:
                answer = "–£–¥–∞–ª–∏–ª —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
            elif caption:
                answer = "–£–¥–∞–ª–∏–ª —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–∏—Å—å"
            else:
                answer = "–£–¥–∞–ª–∏–ª —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
            days_passed = (date.today() - date_of_lecture).days
            if days_passed == 0:
                answer += " (–æ—Ç —Å–µ–≥–æ–¥–Ω—è):"
            elif days_passed == 1:
                answer += " (–æ—Ç –≤—á–µ—Ä–∞):"
            else:
                answer += f" (–æ—Ç {date_of_lecture.strftime('%d.%m.%y')}):"
            vk.messages.send(user_id=buddy_id, message=answer, random_id=0)
            vk.messages.send(user_id=buddy_id, message=caption, attachment=photo_link, random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif msg == "–£–¥–∞–ª–∏—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ":
            makeListOfDates_intoInlineKb(buddy_id, db_id, subject_user_is_in_rn, 'IS NULL', 'choose_deleting_day_from_list', "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å?")
        elif msg == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤ —ç—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ":
            updateUserStatus(buddy_id, 'confirmation_delete_all_materials')
            vk.messages.send(user_id=buddy_id, message="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é, –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –º–∞—Ç–µ—Ä–∏–∞–ª—ã —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑–∞ –í–°–ï –¥–Ω–∏. –í—Å–µ —á–µ—Ç–∫–æ?", random_id=0, keyboard=k_confirmation_delete_all_materials)
        elif msg == "–ù–∞–∑–∞–¥":
            updateUserStatus(buddy_id, 'in_subject')
            vk.messages.send(user_id=buddy_id, message="–ù—É –∫–∞–∫ —Ö–æ—á–µ—à—å", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif not answeredSticker:
            vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_delete_materials)

    elif status == 'recover_materials':
        if msg == "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–¥–∞–ª–µ–Ω–∏–µ":
            updateUserStatus(buddy_id, 'in_subject')
            query = f"SELECT caption, photo_link, date_of_lecture, id FROM materials WHERE deletion_time IS NOT NULL AND user_id = {db_id} AND subject_id = {subject_user_is_in_rn} ORDER BY deletion_time DESC LIMIT 1;"
            curr.execute(query)
            result = curr.fetchall()
            assert(result != [])
            caption = result[0][0]
            photo_link = result[0][1]
            date_of_lecture = result[0][2]
            id_toRecover = result[0][3]
            query = f"UPDATE materials SET deletion_time = NULL WHERE id = {id_toRecover};"
            curr.execute(query)
            connection.commit()
            if caption and photo_link:
                answer = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
            elif caption:
                answer = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–∏—Å—å"
            else:
                answer = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
            days_passed = (date.today() - date_of_lecture).days
            if days_passed == 0:
                answer += " (–æ—Ç —Å–µ–≥–æ–¥–Ω—è):"
            elif days_passed == 1:
                answer += " (–æ—Ç –≤—á–µ—Ä–∞):"
            else:
                answer += f" (–æ—Ç {date_of_lecture.strftime('%d.%m.%y')}):"
            vk.messages.send(user_id=buddy_id, message=answer, random_id=0)
            vk.messages.send(user_id=buddy_id, message=caption, attachment=photo_link, random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif msg == "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ":
            makeListOfDates_intoInlineKb(buddy_id, db_id, subject_user_is_in_rn, 'IS NOT NULL', 'choose_recovering_day_from_list', "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?")
        elif msg == "–ù–∞–∑–∞–¥":
            updateUserStatus(buddy_id, 'in_subject')
            vk.messages.send(user_id=buddy_id, message="–î–∞ –±–µ–∑ –±", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif not answeredSticker:
            vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_recover_materials)

    elif status == 'confirmation_delete_all_materials':
        if msg == "–ù–µ–µ–µ–µ":
            updateUserStatus(buddy_id, 'in_subject')
            vk.messages.send(user_id=buddy_id, message="–ù—É –ª–∞–¥–Ω–æ, –∫–∞–∫ —Å–∫–∞–∂–µ—à—å", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif msg == "–£–¥–∞–ª—è–π!":
            updateUserStatus(buddy_id, 'in_subject')
            query = f"SELECT caption, photo_link, id FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn};"
            curr.execute(query)
            result = curr.fetchall()
            id_toDelete = []
            amount_caption, amount_photo = 0, 0
            for material in result:
                id_toDelete.append(material[2])
                if material[0]:
                    amount_caption += 1
                if material[1]:
                    amount_photo += 1
            query = f"UPDATE materials SET deletion_time = NOW()::TIMESTAMP WHERE id = ANY('{{{', '.join(list(map(str, id_toDelete)))}}}');"
            curr.execute(query)
            connection.commit()
            answer = "–£–¥–∞–ª–∏–ª "
            if amount_caption:
                answer += pickUpRightWordEnding(amount_caption, "–∑–∞–ø–∏—Å—å", "–∑–∞–ø–∏—Å–∏", "–∑–∞–ø–∏—Å–µ–π", writeNumber1=False)
            if amount_photo:
                if amount_caption:
                    answer += " –∏ "
                answer += pickUpRightWordEnding(amount_photo, "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", writeNumber1=False)
            answer += " üëå"
            vk.messages.send(user_id=buddy_id, message=answer, random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif not answeredSticker:
            vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_confirmation_delete_all_materials)

    elif status == 'choose_deleting_day_from_list':
        if msg == "–ù–∞–∑–∞–¥":
            updateUserStatus(buddy_id, 'delete_materials')
            vk.messages.send(user_id=buddy_id, message="–û–∫–µ–π üôÇ", random_id=0, keyboard=k_delete_materials)
        else:
            try:
                if msg == "–°–µ–≥–æ–¥–Ω—è":
                    materials_date = date.today()
                elif msg == "–í—á–µ—Ä–∞":
                    materials_date = date.today() - timedelta(days=1)
                else:
                    dateString = msg[msg.find(' ') + 1:msg.find(' ') + 9]
                    materials_date = date(2000 + int(dateString[6:]), int(dateString[3:5]), int(dateString[:2]))
                how_many_days = pickUpRightWordEnding((date.today() - materials_date).days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
                if how_many_days == "0 –¥–Ω–µ–π":
                    message = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è üëá"
                elif how_many_days == "1 –¥–µ–Ω—å":
                    message = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤—á–µ—Ä–∞ üëá"
                else:
                    message = f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ {how_many_days} –Ω–∞–∑–∞–¥ ({no2_v_dow[materials_date.weekday()]} {materials_date.strftime('%d.%m.%y')}) üëá"
                vk.messages.send(user_id=buddy_id, message=message, random_id=0)
                query = f"SELECT showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{materials_date}'"
                curr.execute(query)
                order_array = curr.fetchall()[0][0]
                join_part = "JOIN (VALUES"
                for i in range(len(order_array)):
                    if i == 0: join_part += f" ({order_array[i]}, {i + 1})"
                    else: join_part += f", ({order_array[i]}, {i + 1})"
                join_part += ") AS x(id, ordering) ON materials.id = x.id "
                join_part += f"WHERE materials.user_id = {db_id} AND materials.subject_id = {subject_user_is_in_rn} AND materials.date_of_lecture = '{materials_date}' AND materials.deletion_time IS NULL "
                join_part += "ORDER BY x.ordering"
                query = f"SELECT caption, photo_link, materials.id FROM materials {join_part};"
                curr.execute(query)
                result = curr.fetchall()
                materials_order = [el[2] for el in result]
                query = f"INSERT INTO intermediate_information (user_id, subject_name, date_of_lecture, materials_order) " \
                        f"VALUES({db_id}, '{current_subject_name}', '{materials_date}', '{{{', '.join(list(map(str, materials_order)))}}}');"
                curr.execute(query)
                connection.commit()
                for i in range(len(result)):
                    vk.messages.send(user_id=buddy_id, message=f"[{i + 1}]\n{result[i][0]}", attachment=result[i][1], random_id=0)
                updateUserStatus(buddy_id, 'choose_materials_to_delete')
                vk.messages.send(user_id=buddy_id, message="–ù–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–æ–º–µ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å ‚¨á", random_id=0, keyboard=k_choose_materials_to_delete)
            except ValueError:
                vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_back)
            except Exception as e:
                log_message = f"choose_deleting_day_from_list\nError: {str(e)}{datetime.now().strftime('%d.%m.%Y, %H:%M:%S')}\n\n"
                with open("ErrorLog.txt", "a", encoding="utf-8") as file:
                    file.write(log_message)
                curr.close()
                connection.close()
                exit(-1)

    elif status == 'choose_materials_to_delete':
        if msg == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ":
            amount_caption, amount_photo = 0, 0
            query = f"SELECT date_of_lecture FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            result = curr.fetchall()
            assert (len(result) == 1)
            materials_date = result[0][0]
            query = f"SELECT caption, photo_link, id FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{materials_date}' AND deletion_time IS NULL ORDER BY adding_time"
            curr.execute(query)
            result = curr.fetchall()
            for material in result:
                if material[0]:
                    amount_caption += 1
                if material[1]:
                    amount_photo += 1
                query = f"UPDATE materials SET deletion_time = NOW()::TIMESTAMP WHERE id = {material[2]};"
                curr.execute(query)
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            updateUserStatus(buddy_id, 'in_subject')
            answer = "–£–¥–∞–ª–∏–ª "
            if amount_caption:
                answer += pickUpRightWordEnding(amount_caption, "–∑–∞–ø–∏—Å—å", "–∑–∞–ø–∏—Å–∏", "–∑–∞–ø–∏—Å–µ–π", writeNumber1=False)
            if amount_photo:
                if amount_caption:
                    answer += " –∏ "
                answer += pickUpRightWordEnding(amount_photo, "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", writeNumber1=False)
            answer += " ‚úÖ"
            vk.messages.send(user_id=buddy_id, message=answer, random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif msg == "–ù–∞–∑–∞–¥":
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            makeListOfDates_intoInlineKb(buddy_id, db_id, subject_user_is_in_rn, 'IS NULL', 'choose_deleting_day_from_list', "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å?")
        else:
            try:
                nos_toDelete = list(map(int, msg.split(',')))
                nos_toDelete = list(filter(lambda x: 0 < x < 100000, nos_toDelete))
                nos_toDelete.sort(reverse=True)
                amount_caption, amount_photo = 0, 0
                query = f"SELECT materials_order FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
                curr.execute(query)
                result = curr.fetchall()
                assert(len(result) == 1)
                materials_order = result[0][0]
                materialIds_toDelete = []
                nos_toDelete_successful = []
                for i in range(len(nos_toDelete)):
                    if nos_toDelete[i] > len(materials_order):
                        continue
                    nos_toDelete_successful.insert(0, nos_toDelete[i])
                    query = f"SELECT caption, photo_link FROM materials WHERE id = {materials_order[nos_toDelete[i] - 1]};"
                    curr.execute(query)
                    material = curr.fetchall()
                    if material:
                        materialIds_toDelete.append(materials_order[nos_toDelete[i] - 1])
                        caption = material[0][0]
                        photo_link = material[0][1]
                        if caption:
                            amount_caption += 1
                        if photo_link:
                            amount_photo += 1
                query = f"UPDATE materials SET deletion_time = NOW()::TIMESTAMP WHERE id = ANY('{{{', '.join(list(map(str, materialIds_toDelete)))}}}');"
                curr.execute(query)
                if amount_caption or amount_photo:
                    query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
                    curr.execute(query)
                    answer = "–£–¥–∞–ª–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª"
                    if len(nos_toDelete_successful) == 1:
                        answer += f" ‚Ññ {nos_toDelete_successful[0]}: "
                    else:
                        answer += f"—ã ‚Ññ {', '.join(list(map(str, nos_toDelete_successful[:-1])))} –∏ {nos_toDelete_successful[-1]}: "
                    if amount_caption:
                        answer += pickUpRightWordEnding(amount_caption, "–∑–∞–ø–∏—Å—å", "–∑–∞–ø–∏—Å–∏", "–∑–∞–ø–∏—Å–µ–π", writeNumber1=False)
                    if amount_photo:
                        if amount_caption:
                            answer += " –∏ "
                        answer += pickUpRightWordEnding(amount_photo, "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", writeNumber1=False)
                    answer += " ‚úÖ"
                    query = f"SELECT COUNT(*) FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND deletion_time IS NULL;"
                    curr.execute(query)
                    rows_amount = curr.fetchall()[0][0]
                    if rows_amount:
                        updateUserStatus(buddy_id, 'delete_materials')
                        vk.messages.send(user_id=buddy_id, message=answer, random_id=0, keyboard=k_delete_materials)
                    else:
                        updateUserStatus(buddy_id, 'in_subject')
                        vk.messages.send(user_id=buddy_id, message=answer, random_id=0)
                        vk.messages.send(user_id=buddy_id, message="–ë–æ–ª—å—à–µ –≤ —ç—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å!", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
                else:
                    vk.messages.send(user_id=buddy_id, message="–¢–∞–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç üôÑ", random_id=0, keyboard=k_choose_materials_to_delete)
            except:
                vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_choose_materials_to_delete)

    elif status == 'choose_recovering_day_from_list':
        if msg == "–ù–∞–∑–∞–¥":
            updateUserStatus(buddy_id, 'recover_materials')
            vk.messages.send(user_id=buddy_id, message="–û–∫–µ–π üôÇ", random_id=0, keyboard=k_recover_materials)
        else:
            try:
                if msg == "–°–µ–≥–æ–¥–Ω—è":
                    materials_date = date.today()
                elif msg == "–í—á–µ—Ä–∞":
                    materials_date = date.today() - timedelta(days=1)
                else:
                    dateString = msg[msg.find(' ') + 1:msg.find(' ') + 9]
                    materials_date = date(2000 + int(dateString[6:]), int(dateString[3:5]), int(dateString[:2]))
                how_many_days = pickUpRightWordEnding((date.today() - materials_date).days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
                if how_many_days == "0 –¥–Ω–µ–π":
                    message = "–£–¥–∞–ª–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è üëá"
                elif how_many_days == "1 –¥–µ–Ω—å":
                    message = "–£–¥–∞–ª–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—á–µ—Ä–∞ üëá"
                else:
                    message = f"–£–¥–∞–ª–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã {how_many_days} –Ω–∞–∑–∞–¥ ({no2_v_dow[materials_date.weekday()]} {materials_date.strftime('%d.%m.%y')}) üëá"
                vk.messages.send(user_id=buddy_id, message=message, random_id=0)
                query = f"SELECT showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{materials_date}'"
                curr.execute(query)
                order_array = curr.fetchall()[0][0]
                join_part = "JOIN (VALUES"
                for i in range(len(order_array)):
                    if i == 0: join_part += f" ({order_array[i]}, {i + 1})"
                    else: join_part += f", ({order_array[i]}, {i + 1})"
                join_part += ") AS x(id, ordering) ON materials.id = x.id "
                join_part += f"WHERE materials.user_id = {db_id} AND materials.subject_id = {subject_user_is_in_rn} AND materials.date_of_lecture = '{materials_date}' AND materials.deletion_time IS NOT NULL "
                join_part += "ORDER BY x.ordering"
                query = f"SELECT caption, photo_link, materials.id FROM materials {join_part};"
                curr.execute(query)
                result = curr.fetchall()
                materials_order = [el[2] for el in result]
                query = f"INSERT INTO intermediate_information (user_id, subject_name, date_of_lecture, materials_order) " \
                        f"VALUES({db_id}, '{current_subject_name}', '{materials_date}', '{{{', '.join(list(map(str, materials_order)))}}}');"
                curr.execute(query)
                connection.commit()
                for i in range(len(result)):
                    vk.messages.send(user_id=buddy_id, message=f"[{i + 1}]\n{result[i][0]}", attachment=result[i][1], random_id=0)
                updateUserStatus(buddy_id, 'choose_materials_to_recover')
                vk.messages.send(user_id=buddy_id, message="–ù–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–æ–º–µ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚¨á", random_id=0, keyboard=k_choose_materials_to_recover)
            except ValueError:
                vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_back)
            except Exception as e:
                log_message = f"choose_recovering_day_from_list\nError: {str(e)}{datetime.now().strftime('%d.%m.%Y, %H:%M:%S')}\n\n"
                with open("ErrorLog.txt", "a", encoding="utf-8") as file:
                    file.write(log_message)
                curr.close()
                connection.close()
                exit(-1)

    elif status == 'choose_materials_to_recover':
        if msg == "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ":
            amount_caption, amount_photo = 0, 0
            query = f"SELECT date_of_lecture FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            result = curr.fetchall()
            assert (len(result) == 1)
            materials_date = result[0][0]
            query = f"SELECT caption, photo_link, id FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{materials_date}' AND deletion_time IS NOT NULL ORDER BY adding_time"
            curr.execute(query)
            result = curr.fetchall()
            for material in result:
                if material[0]:
                    amount_caption += 1
                if material[1]:
                    amount_photo += 1
                query = f"UPDATE materials SET deletion_time = NULL WHERE id = {material[2]};"
                curr.execute(query)
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            updateUserStatus(buddy_id, 'in_subject')
            answer = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª "
            if amount_caption:
                answer += pickUpRightWordEnding(amount_caption, "–∑–∞–ø–∏—Å—å", "–∑–∞–ø–∏—Å–∏", "–∑–∞–ø–∏—Å–µ–π", writeNumber1=False)
            if amount_photo:
                if amount_caption:
                    answer += " –∏ "
                answer += pickUpRightWordEnding(amount_photo, "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", writeNumber1=False)
            answer += " ‚úÖ"
            vk.messages.send(user_id=buddy_id, message=answer, random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif msg == "–ù–∞–∑–∞–¥":
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            makeListOfDates_intoInlineKb(buddy_id, db_id, subject_user_is_in_rn, 'IS NOT NULL', 'choose_recovering_day_from_list', "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?")
        else:
            try:
                nos_toRecover = list(map(int, msg.split(',')))
                nos_toRecover = list(filter(lambda x: 0 < x < 100000, nos_toRecover))
                nos_toRecover.sort(reverse=True)
                amount_caption, amount_photo = 0, 0
                query = f"SELECT materials_order FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
                curr.execute(query)
                result = curr.fetchall()
                assert (len(result) == 1)
                materials_order = result[0][0]
                materialIds_toRecover = []
                nos_toRecover_successful = []
                for i in range(len(nos_toRecover)):
                    if nos_toRecover[i] > len(materials_order):
                        continue
                    nos_toRecover_successful.insert(0, nos_toRecover[i])
                    query = f"SELECT caption, photo_link FROM materials WHERE id = {materials_order[nos_toRecover[i] - 1]};"
                    curr.execute(query)
                    material = curr.fetchall()
                    if material:
                        materialIds_toRecover.append(materials_order[nos_toRecover[i] - 1])
                        caption = material[0][0]
                        photo_link = material[0][1]
                        if caption:
                            amount_caption += 1
                        if photo_link:
                            amount_photo += 1
                query = f"UPDATE materials SET deletion_time = NULL WHERE id = ANY('{{{', '.join(list(map(str, materialIds_toRecover)))}}}');"
                curr.execute(query)
                if amount_caption or amount_photo:
                    query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
                    curr.execute(query)
                    answer = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª"
                    if len(nos_toRecover_successful) == 1:
                        answer += f" ‚Ññ {nos_toRecover_successful[0]}: "
                    else:
                        answer += f"—ã ‚Ññ {', '.join(list(map(str, nos_toRecover_successful[:-1])))} –∏ {nos_toRecover_successful[-1]}: "
                    if amount_caption:
                        answer += pickUpRightWordEnding(amount_caption, "–∑–∞–ø–∏—Å—å", "–∑–∞–ø–∏—Å–∏", "–∑–∞–ø–∏—Å–µ–π", writeNumber1=False)
                    if amount_photo:
                        if amount_caption:
                            answer += " –∏ "
                        answer += pickUpRightWordEnding(amount_photo, "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", writeNumber1=False)
                    answer += " ‚úÖ"
                    query = f"SELECT COUNT(*) FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND deletion_time IS NOT NULL;"
                    curr.execute(query)
                    rows_amount = curr.fetchall()[0][0]
                    if rows_amount:
                        updateUserStatus(buddy_id, 'recover_materials')
                        vk.messages.send(user_id=buddy_id, message=answer, random_id=0, keyboard=k_recover_materials)
                    else:
                        updateUserStatus(buddy_id, 'in_subject')
                        vk.messages.send(user_id=buddy_id, message=answer, random_id=0)
                        vk.messages.send(user_id=buddy_id, message="–ë–æ–ª—å—à–µ –≤ —ç—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ –Ω–µ—á–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å!", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
                else:
                    vk.messages.send(user_id=buddy_id, message="–¢–∞–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç üôÑ", random_id=0, keyboard=k_choose_materials_to_recover)
            except:
                vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_choose_materials_to_recover)

    elif status == 'edit_materials':
        if msg == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤":
            vk.messages.send(user_id=buddy_id, message="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–æ—Å–∏—Ç —á–∏—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ –Ω–∞–∂–∏–º–∞–π –±–æ–ª—å—à–µ —Å—é–¥–∞ üôÇ", random_id=0, keyboard=k_edit_materials)
        elif msg == "–ü—Ä–µ–¥–æ—Å–ª–µ–¥–Ω–∏–π" or msg == "–ü–æ—Å–ª–µ–¥–Ω–∏–π":
            query = f"SELECT showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{date.today()}';"
            curr.execute(query)
            order_array = curr.fetchall()
            if not order_array:
                vk.messages.send(user_id=buddy_id, message=f"–¢—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª{'–∞' if sex == 'female' else ''} —Å–µ–≥–æ–¥–Ω—è", random_id=0, keyboard=k_edit_materials)
                return
            order_array = order_array[0][0]
            join_part = "JOIN (VALUES"
            for i in range(len(order_array)):
                if i == 0: join_part += f" ({order_array[i]}, {i + 1})"
                else: join_part += f", ({order_array[i]}, {i + 1})"
            join_part += ") AS x(id, ordering) ON materials.id = x.id "
            join_part += f"WHERE materials.user_id = {db_id} AND materials.subject_id = {subject_user_is_in_rn} AND materials.date_of_lecture = '{date.today()}' AND materials.deletion_time IS NULL "
            join_part += "ORDER BY x.ordering DESC LIMIT 2;"
            query = f"SELECT caption, photo_link, materials.id FROM materials {join_part};"
            curr.execute(query)
            result = curr.fetchall()
            if len(result) == 1 and msg == "–ü—Ä–µ–¥–æ—Å–ª–µ–¥–Ω–∏–π":
                vk.messages.send(user_id=buddy_id, message="–ó–∞ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–∞—Ç–µ—Ä–∏–∞–ª üòê", random_id=0, keyboard=k_edit_materials)
                return
            if msg == "–ü—Ä–µ–¥–æ—Å–ª–µ–¥–Ω–∏–π":
                caption, photo_link, material_id = result[1]
                vk.messages.send(user_id=buddy_id, message="–ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –∑–∞ —Å–µ–≥–æ–¥–Ω—è üëá", random_id=0)
                vk.messages.send(user_id=buddy_id, message=caption, attachment=photo_link, random_id=0)
            else:
                caption, photo_link, material_id = result[0]
                vk.messages.send(user_id=buddy_id, message="–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –∑–∞ —Å–µ–≥–æ–¥–Ω—è üëá", random_id=0)
                vk.messages.send(user_id=buddy_id, message=caption, attachment=photo_link, random_id=0)
            query = f"INSERT INTO intermediate_information (user_id, subject_name, material_id) VALUES({db_id}, '{current_subject_name}', {material_id});"
            curr.execute(query)
            updateUserStatus(buddy_id, 'edit_specific_material')
            message = f"{'–í–≤–µ–¥–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ' if caption else '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ —Ç–µ–∫—Å—Ç, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏'}. –ß—Ç–æ–±—ã {'–∑–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–∞–Ω–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ,' if photo_link else '–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª,'} –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è {'–∏ ' if photo_link and caption else ''}–µ–≥–æ {'–º–µ–Ω—è—Ç—å' if caption else '–¥–æ–±–∞–≤–ª—è—Ç—å'})"
            if photo_link:
                message += ". –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞–ø–∏—à–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ—Ñ–∏—Å (–∏–ª–∏ –∑–Ω–∞–∫ –º–∏–Ω—É—Å)"
            if caption:
                message += f"{'. –ê –¥–ª—è ' if photo_link else '. –î–ª—è '}—Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ..."
            vk.messages.send(user_id=buddy_id, message=message, random_id=0, keyboard=k_edit_specific_material)
        elif msg == "–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª":
            query = f"SELECT caption, photo_link, date_of_lecture, id FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} ORDER BY adding_time DESC LIMIT 1;"
            curr.execute(query)
            result = curr.fetchall()
            caption = result[0][0]
            photo_link = result[0][1]
            material_date = result[0][2]
            last_added_material_id = result[0][3]
            how_many_days = pickUpRightWordEnding((date.today() - material_date).days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
            if how_many_days == "0 –¥–Ω–µ–π":
                message = "–ú–∞—Ç–µ—Ä–∏–∞–ª, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–µ–≥–æ–¥–Ω—è üëá"
            elif how_many_days == "1 –¥–µ–Ω—å":
                message = "–ú–∞—Ç–µ—Ä–∏–∞–ª, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—á–µ—Ä–∞ üëá"
            else:
                message = f"–ú–∞—Ç–µ—Ä–∏–∞–ª, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π {how_many_days} –Ω–∞–∑–∞–¥ ({no2_v_dow[material_date.weekday()]} {material_date.strftime('%d.%m.%y')}) üëá"
            vk.messages.send(user_id=buddy_id, message=message, random_id=0)
            vk.messages.send(user_id=buddy_id, message=caption, attachment=photo_link, random_id=0)
            message = f"{'–í–≤–µ–¥–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ' if caption else '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ —Ç–µ–∫—Å—Ç, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏'}. –ß—Ç–æ–±—ã {'–∑–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–∞–Ω–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ,' if photo_link else '–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª,'} –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è {'–∏ ' if photo_link and caption else ''}–µ–≥–æ {'–º–µ–Ω—è—Ç—å' if caption else '–¥–æ–±–∞–≤–ª—è—Ç—å'})"
            if photo_link:
                message += ". –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞–ø–∏—à–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ—Ñ–∏—Å (–∏–ª–∏ –∑–Ω–∞–∫ –º–∏–Ω—É—Å)"
            if caption:
                message += f"{'. –ê –¥–ª—è ' if photo_link else '. –î–ª—è '}—Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ..."
            query = f"INSERT INTO intermediate_information (user_id, subject_name, material_id) VALUES({db_id}, '{current_subject_name}', {last_added_material_id});"
            curr.execute(query)
            updateUserStatus(buddy_id, 'edit_specific_material')
            vk.messages.send(user_id=buddy_id, message=message, random_id=0, keyboard=k_edit_specific_material)
        elif msg == "–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞":
            makeListOfDates_intoInlineKb(buddy_id, db_id, subject_user_is_in_rn, 'IS NULL', 'choose_editing_day_from_list', "–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?")
        elif msg == "–ù–∞–∑–∞–¥":
            updateUserStatus(buddy_id, 'in_subject')
            vk.messages.send(user_id=buddy_id, message="–ù–∞–∑–∞–¥ —Ç–∞–∫ –Ω–∞–∑–∞–¥)", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif not answeredSticker:
            vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_edit_materials)

    elif status == 'choose_editing_day_from_list':
        if msg == "–ù–∞–∑–∞–¥":
            updateUserStatus(buddy_id, 'edit_materials')
            vk.messages.send(user_id=buddy_id, message="–û–∫–µ–π üôÇ", random_id=0, keyboard=k_edit_materials)
        else:
            try:
                if msg == "–°–µ–≥–æ–¥–Ω—è":
                    materials_date = date.today()
                elif msg == "–í—á–µ—Ä–∞":
                    materials_date = date.today() - timedelta(days=1)
                else:
                    dateString = msg[msg.find(' ') + 1:msg.find(' ') + 9]
                    materials_date = date(2000 + int(dateString[6:]), int(dateString[3:5]), int(dateString[:2]))
                how_many_days = pickUpRightWordEnding((date.today() - materials_date).days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
                if how_many_days == "0 –¥–Ω–µ–π":
                    message = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è üëá"
                elif how_many_days == "1 –¥–µ–Ω—å":
                    message = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤—á–µ—Ä–∞ üëá"
                else:
                    message = f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ {how_many_days} –Ω–∞–∑–∞–¥ ({no2_v_dow[materials_date.weekday()]} {materials_date.strftime('%d.%m.%y')}) üëá"
                vk.messages.send(user_id=buddy_id, message=message, random_id=0)
                query = f"SELECT showing_order FROM showing_orders WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND date_of_lecture = '{materials_date}';"
                curr.execute(query)
                order_array = curr.fetchall()[0][0]
                join_part = "JOIN (VALUES"
                for i in range(len(order_array)):
                    if i == 0: join_part += f" ({order_array[i]}, {i + 1})"
                    else: join_part += f", ({order_array[i]}, {i + 1})"
                join_part += ") AS x(id, ordering) ON materials.id = x.id "
                join_part += f"WHERE materials.user_id = {db_id} AND materials.subject_id = {subject_user_is_in_rn} AND materials.date_of_lecture = '{materials_date}' AND materials.deletion_time IS NULL "
                join_part += "ORDER BY x.ordering"
                query = f"SELECT caption, photo_link, materials.id FROM materials {join_part};"
                curr.execute(query)
                result = curr.fetchall()
                materials_order = [el[2] for el in result]
                query = f"INSERT INTO intermediate_information (user_id, subject_name, date_of_lecture, materials_order) " \
                        f"VALUES({db_id}, '{current_subject_name}', '{materials_date}', '{{{', '.join(list(map(str, materials_order)))}}}');"
                curr.execute(query)
                connection.commit()
                for i in range(len(result)):
                    vk.messages.send(user_id=buddy_id, message=f"[{i + 1}]\n{result[i][0]}", attachment=result[i][1], random_id=0)
                updateUserStatus(buddy_id, 'choose_material_to_edit')
                vk.messages.send(user_id=buddy_id, message="–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚¨á", random_id=0, keyboard=k_back)
            except ValueError:
                vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_back)
            except Exception as e:
                log_message = f"choose_editing_day_from_list\nError: {str(e)}{datetime.now().strftime('%d.%m.%Y, %H:%M:%S')}\n\n"
                with open("ErrorLog.txt", "a", encoding="utf-8") as file:
                    file.write(log_message)
                curr.close()
                connection.close()
                exit(-1)

    elif status == 'choose_material_to_edit':
        if msg == "–ù–∞–∑–∞–¥":
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            makeListOfDates_intoInlineKb(buddy_id, db_id, subject_user_is_in_rn, 'IS NULL', 'choose_editing_day_from_list', "–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?")
        else:
            try:
                material_no = int(msg)
                query = f"SELECT materials_order FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
                curr.execute(query)
                result = curr.fetchall()
                assert (len(result) == 1)
                materials_order = result[0][0]
                if material_no < 1 or material_no > len(materials_order):
                    vk.messages.send(user_id=buddy_id, message=f"–ù–æ–º–µ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç 1 –¥–æ {len(materials_order)} –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ", random_id=0, keyboard=k_back)
                else:
                    query = f"SELECT caption, photo_link, date_of_lecture FROM materials WHERE id = {materials_order[material_no - 1]};"
                    curr.execute(query)
                    result = curr.fetchall()
                    material_date = result[0][2]
                    how_many_days = pickUpRightWordEnding((date.today() - material_date).days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
                    if how_many_days == "0 –¥–Ω–µ–π":
                        message = "–ú–∞—Ç–µ—Ä–∏–∞–ª, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–µ–≥–æ–¥–Ω—è üëá"
                    elif how_many_days == "1 –¥–µ–Ω—å":
                        message = "–ú–∞—Ç–µ—Ä–∏–∞–ª, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—á–µ—Ä–∞ üëá"
                    else:
                        message = f"–ú–∞—Ç–µ—Ä–∏–∞–ª, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π {how_many_days} –Ω–∞–∑–∞–¥ ({no2_v_dow[material_date.weekday()]} {material_date.strftime('%d.%m.%y')}) üëá"
                    vk.messages.send(user_id=buddy_id, message=message, random_id=0)
                    vk.messages.send(user_id=buddy_id, message=result[0][0], attachment=result[0][1], random_id=0)
                    query = f"UPDATE intermediate_information SET material_id = {materials_order[material_no - 1]} WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
                    curr.execute(query)
                    connection.commit()
                    updateUserStatus(buddy_id, 'edit_specific_material')
                    message = f"{'–í–≤–µ–¥–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ' if result[0][0] else '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ —Ç–µ–∫—Å—Ç, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏'}. –ß—Ç–æ–±—ã {'–∑–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–∞–Ω–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ,' if result[0][1] else '–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª,'} –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è {'–∏ ' if result[0][1] and result[0][0] else ''}–µ–≥–æ {'–º–µ–Ω—è—Ç—å' if result[0][0] else '–¥–æ–±–∞–≤–ª—è—Ç—å'})"
                    if result[0][1]:
                        message += ". –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞–ø–∏—à–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ—Ñ–∏—Å (–∏–ª–∏ –∑–Ω–∞–∫ –º–∏–Ω—É—Å)"
                    if result[0][0]:
                        message += f"{'. –ê –¥–ª—è ' if result[0][1] else '. –î–ª—è '}—Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ..."
                    vk.messages.send(user_id=buddy_id, message=message, random_id=0, keyboard=k_edit_specific_material)
            except:
                vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_back)

    elif status == 'edit_specific_material':
        if msg == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª":
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            updateUserStatus(buddy_id, 'edit_materials')
            vk.messages.send(user_id=buddy_id, message="–ö–∞–∫ —Ö–æ—á–µ—à—å üòâ", random_id=0, keyboard=k_edit_materials)
        elif msg == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            updateUserStatus(buddy_id, 'main_menu')
            vk.messages.send(user_id=buddy_id, message="–ö–∞–∫ —Ö–æ—á–µ—à—å üòâ", random_id=0, keyboard=k_main_menu)
        elif msg == "–ú–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–∞":
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            updateUserStatus(buddy_id, 'in_subject')
            vk.messages.send(user_id=buddy_id, message="–í–µ—Ä–Ω—É–ª üôÇ", random_id=0, keyboard=k_in_subject__createFor(current_subject_name))
        elif msg == "" and photos == []:
            if not answeredSticker:
                vk.messages.send(user_id=buddy_id, sticker_id=(13897 if random.randrange(2) == 0 else 77708), random_id=0, keyboard=k_edit_specific_material)
        else:
            photos = list(map(lambda x: addPhotoToAlbum(x), photos))
            if len(photos) > 1:
                vk.messages.send(user_id=buddy_id, message="–í –æ–¥–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É", random_id=0, keyboard=k_edit_specific_material)
                return
            query = f"SELECT material_id FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            material_id = curr.fetchall()[0][0]
            query = f"SELECT caption, photo_link FROM materials WHERE id = {material_id};"
            curr.execute(query)
            result = curr.fetchall()
            caption = result[0][0]
            photo_link = result[0][1]
            if msg in {'-', '‚Äì', '‚Äî'} and not caption and photo_link:
                vk.messages.send(user_id=buddy_id, message="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ", random_id=0, keyboard=k_edit_specific_material)
                return
            if msg == "..." and not photo_link and not photos:
                vk.messages.send(user_id=buddy_id, message="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ", random_id=0, keyboard=k_edit_specific_material)
                return
            if msg == "":
                changeCaption = False
            elif msg[0] in {'-', '‚Äì', '‚Äî'} and (len(msg) == 1 or msg[1] == '\n'):
                if not photos:
                    vk_me.photos.delete(owner_id=-group_id, photo_id=int(photo_link[photo_link.rfind('_') + 1:]))
                    query = f"UPDATE materials SET photo_link = '' WHERE id = {material_id};"
                    curr.execute(query)
                if len(msg) == 1:
                    changeCaption = False
                else:
                    changeCaption = True
                    msg = msg[2:]
            else:
                changeCaption = True
                if msg == "...":
                    msg = ''
            if changeCaption or photos:
                query = f'''UPDATE materials SET caption = {f"'{msg}'" if changeCaption else 'caption'}, photo_link = {f"'{photos[0]}'" if photos else 'photo_link'} WHERE id = {material_id};'''
                curr.execute(query)
            if photos and photo_link:
                vk_me.photos.delete(owner_id=-group_id, photo_id=int(photo_link[photo_link.rfind('_') + 1:]))
            vk.messages.send(user_id=buddy_id, message="–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –≤—ã–≥–ª—è–¥–∏—Ç –≤–æ—Ç —Ç–∞–∫:", random_id=0)
            query = f"DELETE FROM intermediate_information WHERE user_id = {db_id} AND subject_name = '{current_subject_name}';"
            curr.execute(query)
            updateUserStatus(buddy_id, 'edit_materials')
            query = f"SELECT caption, photo_link FROM materials WHERE id = {material_id};"
            curr.execute(query)
            result = curr.fetchall()
            vk.messages.send(user_id=buddy_id, message=result[0][0], attachment=result[0][1], random_id=0)
            vk.messages.send(user_id=buddy_id, message="–ß—Ç–æ –µ—â–µ –Ω–∞–¥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? üòÉ", random_id=0, keyboard=k_edit_materials)

    else:
        with open("ErrorLog.txt", "a", encoding="utf-8") as file:
            file.write(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å\n\n")
        exit(-1)


def combineMaterialsIntoGroups(materials: tuple):
    combinedMaterials = []
    photoGroup = ''
    for material in materials:
        if material[0] == '':
            if photoGroup:
                photoGroup += f",{material[1]}"
            else:
                photoGroup = material[1]
        else:
            if photoGroup:
                combinedMaterials.append(['', photoGroup])
                photoGroup = ''
            combinedMaterials.append(material)
    if photoGroup:
        combinedMaterials.append(['', photoGroup])
    return tuple(combinedMaterials)


def makeListOfDates_intoInlineKb(buddy_id, db_id, subject_user_is_in_rn, deletion_time__value, next_status, final_phrase):
    query = f"SELECT DISTINCT date_of_lecture FROM materials WHERE user_id = {db_id} AND subject_id = {subject_user_is_in_rn} AND deletion_time {deletion_time__value} ORDER BY date_of_lecture DESC;"
    curr.execute(query)
    unique_dates = [el[0] for el in curr.fetchall()]
    assert (unique_dates != [])
    updateUserStatus(buddy_id, next_status)
    buttons_names = []
    for unique_date in unique_dates:
        if unique_date == date.today():
            buttons_names.append("–°–µ–≥–æ–¥–Ω—è")
        elif unique_date == date.today() - timedelta(days=1):
            buttons_names.append("–í—á–µ—Ä–∞")
        else:
            days_passed = (date.today() - unique_date).days
            if days_passed % 7 == 0:
                when = f"{no2dow_short[unique_date.weekday()]}, {unique_date.strftime('%d.%m.%y')} ({pickUpRightWordEnding(int(days_passed / 7), '–Ω–µ–¥–µ–ª—é', '–Ω–µ–¥–µ–ª–∏', '–Ω–µ–¥–µ–ª—å', writeNumber1=False)} –Ω–∞–∑–∞–¥)"
            else:
                when = f"{no2dow[unique_date.weekday()]}, {unique_date.strftime('%d.%m.%y')}"
            buttons_names.append(when)
    kbrds = makeInlineKeyboardsFromList(buttons_names)
    for kbrd in kbrds:
        vk.messages.send(user_id=buddy_id, message='...', random_id=0, keyboard=kbrd)
    vk.messages.send(user_id=buddy_id, message=final_phrase, random_id=0, keyboard=k_back)


def pickUpRightWordEnding(number, ones: str, two_three_four: str, rest: str, writeNumber1=True):
    phrase = f"{number} "
    if not writeNumber1 and number == 1:
        phrase = ''
    if number % 10 == 1 and number % 100 != 11:
        phrase += ones
    elif (number % 10 == 2 or number % 10 == 3 or number % 10 == 4) and not (12 <= number % 100 <= 14):
        phrase += two_three_four
    else:
        phrase += rest
    return phrase


def updateUserStatus(user_id, new_status):
    query = f"UPDATE users SET status = '{new_status}' WHERE vk_id = {user_id};"
    curr.execute(query)
    connection.commit()


def makeInlineKeyboardsFromList(array):
    result = {}
    kbrd = kb.VkKeyboard(inline=True)
    kbrd.add_button(array[0])
    for i in range(1, len(array)):
        if i % 6 == 0:
            result[kbrd.get_keyboard()] = [i - 5, i]
            kbrd = kb.VkKeyboard(inline=True)
            kbrd.add_button(array[i])
        else:
            kbrd.add_line()
            kbrd.add_button(array[i])
    result[kbrd.get_keyboard()] = [len(array) - (len(array) - 1) % 6, len(array)]
    return result


def getPhotosFromLastMessage(buddy_id, photos):
    lastMsg = vk.messages.getHistory(user_id=str(buddy_id), count=1)["items"][0]
    for attachment in lastMsg["attachments"]:
        if attachment["type"] == "photo":
            att = attachment["photo"]
            y_url = next(filter(lambda x: x['type'] == 'y', att['sizes']))['url']
            photos.append(y_url)


def addPhotoToAlbum(photo_link, album_id=main_album_id):
    with open("image_material.jpg", "wb") as file:
        file.write(requests.get(photo_link).content)
    upload_url = vk_me.photos.getUploadServer(album_id=album_id, group_id=group_id)['upload_url']
    to_save = requests.post(upload_url, files={'photo': open("image_material.jpg", "rb")}).json()
    picture = vk_me.photos.save(album_id=to_save['aid'], group_id=to_save['gid'], server=to_save['server'], photos_list=to_save['photos_list'], hash=to_save['hash'])[0]
    return f'photo{picture["owner_id"]}_{picture["id"]}'


def deletePhotosPermanently():
    connection_temp = psycopg2.connect(dbname=db_dbname,
                                       host=db_host,
                                       user=db_user,
                                       password=db_password)
    curr_temp = connection_temp.cursor()
    current_time = datetime.today()
    query = f"SELECT materials.id, materials.user_id, subject_id, caption, photo_link, date_of_lecture, adding_time, deletion_time, users.name, users.surname, users.profile_link, subjects.name " \
            f"FROM materials " \
            f"JOIN users ON materials.user_id = users.id " \
            f"JOIN subjects ON materials.subject_id = subjects.id " \
            f"WHERE deletion_time IS NOT NULL;"
    curr_temp.execute(query)
    result = curr_temp.fetchall()
    file = open("ScheduleLog.txt", "w")
    file.write(f"{current_time.strftime('%d.%m.%Y %H:%M:%S')}\n\n")
    ids_toDelete_fromDB = []
    photos_toDelete_fromVk = []
    for material in result:
        material_id, user_id, subject_id, caption, photo_link, date_of_lecture, adding_time, deletion_time, user_name, user_surname, profile_link, subject_name = material
        days_left = 30 - (current_time - deletion_time).days - 1
        if days_left < 0:
            days_left = "—É–¥–∞–ª–µ–Ω"
            ids_toDelete_fromDB.append(material_id)
            photos_toDelete_fromVk.append(photo_link)
        elif days_left == 0: days_left = "<1 –¥–Ω—è"
        else: days_left = pickUpRightWordEnding(days_left, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
        file.write(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material_id}")
        file.write(f"\n–î–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–≤—Å–µ–≥–¥–∞: {days_left}")
        file.write(f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} {user_surname} ({user_id})")
        file.write(f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: {profile_link}")
        file.write(f"\n–ü—Ä–µ–¥–º–µ—Ç: \"{subject_name}\" ({subject_id})")
        file.write(f"\n–î–∞—Ç–∞ –ª–µ–∫—Ü–∏–∏: {date_of_lecture.strftime('%d.%m.%Y')}")
        file.write(f"\n–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {adding_time.strftime('%d.%m.%y %H:%M:%S.%f')}")
        file.write(f"\n–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: {deletion_time.strftime('%d.%m.%y %H:%M:%S.%f')}")
        if caption: caption = "\"" + caption + "\""
        else: caption = "–Ω–µ—Ç"
        file.write(f"\n–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: {photo_link if photo_link else '–Ω–µ—Ç'}\n–¢–µ–∫—Å—Ç: {caption}\n\n")
    file.close()
    query = f"DELETE FROM materials WHERE id = ANY('{{{', '.join(list(map(str, ids_toDelete_fromDB)))}}}');"
    curr_temp.execute(query)
    connection_temp.commit()
    curr_temp.close()
    connection_temp.close()
    for photo_link in photos_toDelete_fromVk:
        vk_me.photos.delete(owner_id=-group_id, photo_id=int(photo_link[photo_link.rfind('_') + 1:]))


def startProcess():
    Process(target=startSchedule, args=()).start()


def startSchedule():
    schedule.every().day.at("00:00").do(deletePhotosPermanently)
    while True:
        schedule.run_pending()
        sleep(60)


if __name__ == '__main__':
    startProcess()
    while True:
        try:
            for event in longpoll.listen():
                if event.type == VkEventType.MESSAGE_NEW and event.from_user and event.to_me:
                    anyPhotos = False
                    stickerId = None
                    for ii in range(1, len(event.attachments)):
                        if f"attach{ii}_type" not in event.attachments:
                            break
                        if event.attachments[f"attach{ii}_type"] == 'sticker':
                            stickerId = int(event.attachments[f"attach{ii}"])
                            break
                        if event.attachments[f"attach{ii}_type"] == 'photo':
                            anyPhotos = True
                            break
                    threading.Thread(process(event.user_id, event.text.replace('&quot;', '"'), anyPhotos, stickerId), daemon=True).start()
        except requests.exceptions.ConnectionError as ex:
            logg_message = f"Error: {str(ex)}\n{datetime.now().strftime('%d.%m.%Y, %H:%M:%S')}\n\n"
            with open("ErrorLog.txt", "a", encoding="utf-8") as f:
                f.write(logg_message)
            print(logg_message)
            sleep(1)
        except requests.exceptions.ReadTimeout as ex:
            logg_message = f"Error: {str(ex)}\n{datetime.now().strftime('%d.%m.%Y, %H:%M:%S')}\n\n"
            with open("ErrorLog.txt", "a", encoding="utf-8") as f:
                f.write(logg_message)
            print(logg_message)
            sleep(1)
